####################################
# This game is based on the original Double Panda game: 
# https://www.coolmathgames.com/0-double-panda
####################################

####################################
# This file contains:
#   Platform class
#   Bamboo class
#   Candy class
# Each class contains properties of the object and may contain images.
# All of these are generated by the main app during runtime.
####################################

import random, os
import pygame as pg
from settings import *

# surface for Players, Enemies, and Candy to be on
class Platform(pg.sprite.Sprite):
    def __init__(self, game, level, x, width):
        pg.sprite.Sprite.__init__(self)
        self.game = game
        self.image = pg.Surface((width, platHeight))
        self.image.fill(green)
        self.rect = self.image.get_rect()
        self.level = level

        # top left corner
        self.rect.x = x
        self.rect.y = floorLevel - level * levelHeight 

        self.enemiesOn = []

    # adds an Enemy to the platform
    def addEnemy(self, enemy):
        self.enemiesOn.append(enemy)
    
    # draws with appropriate shift
    def draw(self):
        self.game.screen.blit(self.image, (self.rect.x - self.game.scrollX, self.rect.y))

# contains properties of the Floor that Players can be on
class Floor(pg.sprite.Sprite):
    def __init__(self, game):
        pg.sprite.Sprite.__init__(self)
        self.game = game
        self.image1 = pg.image.load(os.path.join(imagesFolder, 'floor.png')).convert()
        self.image2 = pg.image.load(os.path.join(imagesFolder, 'floor.png')).convert()

    # draws a continuous floor by calculating appropriate scroll
    def draw(self):
        modScroll = self.game.scrollX % screenWidth
        image1X = -modScroll
        image2X = screenWidth - modScroll
        if image1X == -screenWidth:
            image1X = 0
            image2X = screenWidth
        self.game.screen.blit(self.image1, (image1X, floorLevel))
        if image2X < screenWidth:
            self.game.screen.blit(self.image2, (image2X, floorLevel))

# RedPanda can climb bamboo
class Bamboo(pg.sprite.Sprite):
    def __init__(self, game, x):
        self.x = x
        self.game = game
        self.image = pg.Surface((bambooWidth, floorLevel))
        self.image.fill(green)
        self.rect = self.image.get_rect()

        # top left corner
        self.rect.x = x - bambooWidth // 2
        self.rect.y = 0
    
    # draws with appropriate shift
    def draw(self):
        self.game.screen.blit(self.image, (self.rect.x - self.game.scrollX, self.rect.y))

# Candy gives Players points
# Candy types: cupcake, pie slice, fortune cookie, fried rice
class Candy(pg.sprite.Sprite):
    def __init__(self, game, x, y):
        pg.sprite.Sprite.__init__(self)
        self.game = game
        self.setCandyType(x, y)
    
    # sets candyType, image, and rect
    def setCandyType(self, x, y):
        r = random.randint(0, 100)
        if (r < 70):
            self.candyType = 'Cupcake'
            self.scoreGain = 50
            # following picture captured from: https://www.coolmathgames.com/0-double-panda
            self.image = pg.image.load(os.path.join(imagesFolder, 'cupcake.png')).convert()
            # self.image.set_colorkey(BLACK) # ignore black around the image in the rect
        elif (70 < r < 98):
            self.candyType = 'Pie Slice'
            self.scoreGain = 100
            # following picture captured from: https://www.coolmathgames.com/0-double-panda
            self.image = pg.image.load(os.path.join(imagesFolder, 'pie.png')).convert()
            # self.image.set_colorkey(BLACK) # ignore black around the image in the rect
        else:
            self.candyType = 'Fortune Cookie'
            self.scoreGain = 500
            # following picture captured from: https://www.coolmathgames.com/0-double-panda
            self.image = pg.image.load(os.path.join(imagesFolder, 'fortunecookie.png')).convert()
            # self.image.set_colorkey(BLACK) # ignore black around the image in the rect
        
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y - self.rect.height # in order to be able to draw it from the upper left hand corner
    
    # makes the candy into a fried rice that only RedPanda can eat
    def makeIntoFriedRice(self):
        x, y = self.rect.centerx, self.rect.bottom
        self.candyType = 'Fried Rice'
        self.scoreGain = 1000
        # following picture captured from: https://www.coolmathgames.com/0-double-panda
        self.image = pg.image.load(os.path.join(imagesFolder, 'friedrice.png')).convert()
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.bottom = y
    
    # draws with appropriate shift
    def draw(self):
        self.game.screen.blit(self.image, (self.rect.x - self.game.scrollX, self.rect.y))
